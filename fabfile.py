'''
# Usage examples:

Initialize local deployment environment:

    fab local init

Create virtual environment and install packages:

    fab local venv_create venv_install

Deploy code:

    fab local all

Example of running code:

    cd /Users/td23/deploy/vanvactor_mirna/python
    ../venv/bin/python download_microcosm.py

'''

import StringIO
import os

from fabric.api import cd, env, execute, put, require, run, task

import fabvenv

HERE = os.path.abspath(os.path.dirname(__file__))


###############
# CONFIGURATION

# 'config' is an alterantive to fabric.api.env, which does not risk having
# application configuration conflict with fabric internals, like 'port'.
class Namespace(object):
    ''' An iterable attribute namespace '''
    def __iter__(self):
        return iter(self.__dict__)

config = Namespace()


@task
def local():
    '''
    Configure tasks for local deployment.
    '''
    env.hosts = ['localhost']
    config.deploy_env = 'local'
    config.proj = os.path.expanduser('~/deploy/vanvactor_mirna')
    config.system_python = '/usr/local/bin/python'
    post_config(config)


@task
def prod():
    '''
    Configure for deployment to EC2 production semantic database server
    '''
    env.hosts = ['ec2-23-21-187-71.compute-1.amazonaws.com']
    env.user = 'ubuntu'
    env.key_filename = os.path.expanduser('~/.ssh/tfd_20120531.pem')
    config.deploy_env = 'prod'
    config.proj = os.path.expanduser('/home/ubuntu/deploy/vanvactor_mirna')
    config.system_python = '/usr/bin/python'
    post_config(config)


def post_config(config):
    '''
    Called by one of the deployment environment configuration tasks: dev, prod,
    etc.  Sets some values in `config`.
    '''
    config.venv = os.path.join(config.proj, 'venv')
    config.data = os.path.join(config.proj, 'data')
    config.code = os.path.join(config.proj, 'python')
    config.python = os.path.join(config.venv, 'bin', 'python')
    config.requirements = os.path.join(HERE, 'requirements.txt')
    env.configured = True
    return config


###########################
# VIRTUAL ENVIRONMENT TASKS

@task
def venv_create():
    require('configured')
    venv = fabvenv.Venv(config.venv, config.requirements)
    if not venv.exists():
        venv.create(config.system_python)


@task
def venv_install():
    require('configured')
    fabvenv.Venv(config.venv, config.requirements).install()


@task
def venv_upgrade():
    require('configured')
    fabvenv.Venv(config.venv, config.requirements).upgrade()


@task
def venv_freeze():
    require('configured')
    fabvenv.Venv(config.venv, config.requirements).freeze()


@task
def venv_remove():
    require('configured')
    venv = fabvenv.Venv(config.venv, config.requirements)
    if venv.exists():
        venv.remove()

def venv_pth():
    '''
    Add the code directory to the virtualenv sys.path.
    '''
    require('configured')
    fabvenv.Venv(config.venv, config.requirements).venv_pth([config.code])


##########################
# RELEASE DEPLOYMENT TASKS


@task
def clean():
    require('configured')
    run('rm -rf ' + config.code)


@task
def init():
    require('configured')
    dirs = [config.data, config.code]
    run('mkdir -p -m 2775 ' + ' '.join(dirs))


@task
def conf():
    '''
    '''
    require('configured')

    # Copy secrets files
    put(os.path.join(HERE, 'secrets/{}.py'.format(config.deploy_env)),
        os.path.join(config.code, 'secrets.py'), mode=0660)

    # Generate deployenv.py
    out = StringIO.StringIO()
    out.write("# Autogenerated file.  Do not modify.\n")
    out.write("datadir = '{}'\n".format(config.data))
    put(out, os.path.join(config.code, 'deployenv.py'), mode=0664)


@task
def deploy():
    '''
    '''
    require('configured')
    put(os.path.join(HERE, 'python'), os.path.join(config.proj), mode=0664)


#########################################
# CONVENIENCE TASKS FOR DOING MANY THINGS


@task
def full():
    require('configured')
    execute(venv_remove)
    execute(venv_create)
    execute(most)


@task
def most():
    require('configured')
    execute(venv_install)
    execute(venv_pth)
    execute(clean)
    execute(init)
    execute(conf)
    execute(deploy)


